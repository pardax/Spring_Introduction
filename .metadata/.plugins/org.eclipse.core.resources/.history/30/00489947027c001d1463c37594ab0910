package com.yoon.SpringCapstone.management.controller;

import java.util.List;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;

import com.yoon.SpringCapstone.dto.PostDto;
import com.yoon.SpringCapstone.entity.Post;
import com.yoon.SpringCapstone.utils.GetPost;
import com.yoon.SpringCapstone.utils.UpdatePost;
import com.yoon.SpringCapstone.utils.UploadPost;

import lombok.RequiredArgsConstructor;
import lombok.extern.log4j.Log4j2;

@Controller
@Log4j2
@RequestMapping("/admin")
@RequiredArgsConstructor
public class ManageController {
	
	@Autowired
	UploadPost uploadPost;
	
	private final GetPost getPost;
	
	private final UpdatePost updatePost;
	
//	@Autowired
//	Getpost getPost;
	
	@GetMapping({"/main", ""})
	public String management(Model model) {
		log.info("컨트롤 : " + "joined admin page");
		return "adminMainPage";
	}
	
	
	
	
	
//----------------------------------------------------------
	
	// <Manage Controller Start>
	@GetMapping("/managePost")
	public String managePost(Model model) {
		
		List<Post> posts = getPost.getPostItems();
		
		model.addAttribute("postList", posts);
		
		log.info("컨트롤 : " + "joined admin manage page");
		return "adminManagePage";
	}
	// <Manage Controller End>
	
	
	// <Edit Controller Start>
	@GetMapping("/editpost/{postId}")
	public String editPost(@PathVariable("postId")Long id, Model model) {
		//폼
		Post temp = getPost.getItem(id);
		
		model.addAttribute("LoadedDto", temp);
		
		log.info("Edit Page, Post ID : " + id);
		return "adminPostEditPage";
	}
	
	@PostMapping("/editPost")
	public String editPost(@Valid PostDto postDto, Model model) {
		
		updatePost.updateParameter(postDto);
		
		return "redirect:/";
	}
	
	// <Edit Controller End>
	
	
	
	// <Posting Controller Start>
	@GetMapping("/uploadPost")
	public String uploadPost(Model model) {
		//postPage html object
		model.addAttribute("PostDto", new PostDto());
		log.info("컨트롤 : " + "joined admin post page");
		return "adminPostPage";
	}
	
	@PostMapping("/uploadPost")
	public String uploadPost(@Valid PostDto postDto, BindingResult bindR, Model model) {
		
		if(bindR.hasErrors()) {
			log.info("uploading => Binding Error");
			return "/main";
		}
		
		try {
			Post post = Post.createPost(postDto);
			uploadPost.uploadPost(post);
			log.info("uploading => created successfully");
		}catch (IllegalStateException e) {
			log.info("uploading => creating Error");
			return "/uploadPost";
		}
		
		log.info("uploading => successfully save");
		return "redirect:/";
	}
	
	@GetMapping("/createData")
	public String createTestData(Model model) {
		
		PostDto temp1 = new PostDto();
		temp1.setCategoryTitle("Google Dinosaur Game");
		temp1.setTitle("Google Dinosaur Game");
		temp1.setText("구글 크롬의 공룡 게임을 구현, 원본의 이미지 리소스를 참고 하였음");
		Post tp1 = Post.createPost(temp1);
		uploadPost.uploadPost(tp1);
		
		PostDto temp2 = new PostDto();
		temp2.setCategoryTitle("테트리스");
		temp2.setTitle("테트리스");
		temp2.setText("자바의 배열과 스레드를 주로 이용하여 만든 게임. 20행/10열의 배열을 기반한 값을 통해 시각적으로 미노들을 표현하였음.");
		Post tp2 = Post.createPost(temp2);
		uploadPost.uploadPost(tp2);
		
		PostDto temp3 = new PostDto();
		temp3.setCategoryTitle("Climb Cat");
		temp3.setTitle("Climb Cat");
		temp3.setText("교재에 제공 된 예제를 기반으로 몇가지 기능을 추가하여 만든 게임.");
		Post tp3 = Post.createPost(temp3);
		uploadPost.uploadPost(tp3);
		
		PostDto temp4 = new PostDto();
		temp4.setCategoryTitle("Google Dinosaur Game");
		temp4.setTitle("Google Dinosaur Game");
		temp4.setText("구글 크롬의 공룡 게임을 구현, 원본의 이미지 리소스를 참고 하였음");
		Post tp4 = Post.createPost(temp4);
		uploadPost.uploadPost(tp4);
		
		return "redirect:/";
	}
	// <Posting Controller End>
	
}
